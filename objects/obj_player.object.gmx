<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_playerR</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_moveable</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//Physics objects must call the parent object's create event
//to initialize physics variables.  Here we are calling it
//BEFORE we initialize the player's stats because obj_moveable
//also defines S_SLOPE_SLOW for itself and we want to
//overwrite the value of it with one specifically for obj_player
event_inherited();

//Here some player stats are defined (so they can be easily
//tweaked if needed).
S_GRAVITY       = 0.3;      //Accel. due to gravity (pixels/step*step)
S_RUN_ACCEL     = 0.3;      //Accel. from running on ground (pixels/step*step)
S_RUN_FRIC      = 0.2;      //Friction on the ground (pixels/step*step)
S_AIR_ACCEL     = 0.4;      //Accel. from running in the air (pixels/step*step)
S_AIR_FRIC      = 0.2;      //Friction in the air (pixels/step*step)
S_JUMP_SPEED    = -4.5;
S_DJUMP_SPEED   = -2;       //Double jump speed
S_MAX_H         = 2;        //Max horizontal speed
S_MAX_V         = 5;        //Max vertical speed
S_SLOPE_SLOW    = 0.2;      //Decceleration while climbing slopes

//Whether the player can currently double jump
candj = true;   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>k_left = vk_left;
k_right = vk_right;
k_up = vk_up;
k_down = vk_down;

k_a = ord('A');
k_b = ord('S');
k_start = vk_enter;
k_select = vk_rshift;


dir = "right";  //Direction the player is facing

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>hp = 3;
image_speed = 0.125;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*      PLAYER INPUT EVAL       */

var accel, fric;
if (on_ground) {
    accel = S_RUN_ACCEL;
    fric = S_RUN_FRIC;
} else {
    accel = S_AIR_ACCEL;
    fric = S_AIR_FRIC;
}

//MOVEMENT

if (keyboard_check( k_right ) || gamepad_axis_value(0, gp_axislh) &gt; 0.25) {
    //Running right
    dir = "right";
    sprite_index = spr_playerWR;
    //First add friction if currently running left
    if (hspd &lt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, S_MAX_H, accel ); 

} else if (keyboard_check( k_left ) || gamepad_axis_value(0, gp_axislh) &lt; -0.25) {
    //Running left
    
    dir = "left";
    sprite_index = spr_playerWL;
    
    //First add friction if currently running right
    if (hspd &gt; 0)
        hspd = approach( hspd, 0, fric );
        
    hspd = approach( hspd, -S_MAX_H, accel ); 

} else {
    //Stopping
    
    if( dir == "right" ){
        sprite_index = spr_playerR;
    }
    else if( dir == "left" ){
        sprite_index = spr_playerL;
    }
    
    hspd = approach( hspd, 0, fric );

}


if (on_ground) {

    candj = true;
    image_speed = 0.125;
    //Jumping
    if (keyboard_check_pressed( k_a ) || gamepad_button_check_pressed(0, gp_face1)){
        vspd = S_JUMP_SPEED;
        audio_play_sound(snd_jump, 1, false);
    }
} else {
    //Gravity
    vspd = approach( vspd, S_MAX_V, S_GRAVITY );
    
    //Jumping sprites
    
    //Right jump
    if( sprite_index == spr_playerR || sprite_index == spr_playerWR ){
        sprite_index = spr_playerJR;
        image_speed = 0;
        
        //If you're falling
        if( vspd &gt; 0 ){
            image_index = 2;
        }
        else{
            image_index = 0;
        }
    }
    else if( sprite_index == spr_playerL || sprite_index == spr_playerWL ){
        sprite_index = spr_playerJL;
        image_speed = 0;
        
        //If you're falling
        if( vspd &gt; 0 ){
            image_index = 2;
        }
        else{
            image_index = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//ATTACKING

if( keyboard_check_pressed(k_b) || gamepad_button_check_pressed(0, gp_face3)){
    slash = instance_create(x,y, obj_slash);
    //If you're facing left
    if( dir == "left" ){
        slash.image_xscale = -1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Vertical Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall vertically, so stop moving vertically!
vspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>605</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>Horizontal Wall Collision</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//You've collided with a wall horizontally, so stop moving horizontally!
hspd = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
